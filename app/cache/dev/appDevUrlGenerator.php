<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    static private $declaredRoutes = array(
        '_assetic_bootstrap_css' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_css',    'pos' => NULL,    '_format' => 'css',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/css/bootstrap.css',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_css_0' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_css',    'pos' => 0,    '_format' => 'css',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/css/bootstrap_bootstrap_1.css',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_css_1' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_css',    'pos' => 1,    '_format' => 'css',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/css/bootstrap_form_2.css',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => NULL,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_0' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 0,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_transition_1.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_1' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 1,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_alert_2.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_2' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 2,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_button_3.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_3' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 3,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_carousel_4.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_4' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 4,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_collapse_5.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_5' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 5,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_dropdown_6.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_6' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 6,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_modal_7.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_7' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 7,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_tooltip_8.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_8' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 8,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_popover_9.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_9' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 9,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_scrollspy_10.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_10' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 10,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_tab_11.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_11' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 11,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_affix_12.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_bootstrap_js_12' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'bootstrap_js',    'pos' => 12,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/bootstrap_bc-bootstrap-collection_13.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_jquery' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'jquery',    'pos' => NULL,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/jquery.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_assetic_jquery_0' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'assetic.controller:render',    'name' => 'jquery',    'pos' => 0,    '_format' => 'js',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/js/jquery_jquery_1.js',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_purge' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:purgeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/purge',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_import' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:importAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/import',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_export' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:exportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '.txt',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/\\.]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler/export',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::checkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_step' => array (  0 =>   array (    0 => 'index',  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::stepAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'index',    ),    1 =>     array (      0 => 'text',      1 => '/_configurator/step',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_configurator_final' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Sensio\\Bundle\\DistributionBundle\\Controller\\ConfiguratorController::finalAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_configurator/final',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_2legged' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\DefaultController::twoleggedAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/twolegged',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_3legged' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\DefaultController::threeleggedAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/threelegged',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_collaudo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\DefaultController::collaudoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/collaudo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_help' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\DefaultController::helpAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/help',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_structure' => array (  0 =>   array (    0 => 'type',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\StructureController::getStructureAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'type',    ),    1 =>     array (      0 => 'text',      1 => '/structure/node',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_change_state' => array (  0 =>   array (    0 => 'nid',    1 => 'state',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\StructureController::changeStateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'state',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    2 =>     array (      0 => 'text',      1 => '/structure/change_state',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_unpublish_live' => array (  0 =>   array (    0 => 'nid',    1 => 'vid',    2 => 'state',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\StructureController::unpublishLiveAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'state',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'vid',    ),    2 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    3 =>     array (      0 => 'text',      1 => '/structure/unpublish_live',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_list_nodes' => array (  0 =>   array (    0 => 'type',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\NodeController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'type',    ),    1 =>     array (      0 => 'text',      1 => '/node/detail',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_list_all_nodes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\NodeController::allNodesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node_all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_node' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\NodeController::getAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/node/get',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_delete_node' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\NodeController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/node/delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_accreditation_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\AccreditationNodeController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/create_accreditation',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_eliot_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\EliotNodeController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/create_eliot',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_get_eliot_types' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\EliotNodeController::getTypesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/eliot/get_types',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_file' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\FileController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/file/create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_list_nodes_topic' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\TopicNodeController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/detail/topic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_topic_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\TopicNodeController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/create_topic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_topic_tag' => array (  0 =>   array (    0 => 'name',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\TopicNodeController::createTagAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'name',    ),    1 =>     array (      0 => 'text',      1 => '/node/create_topic_tag',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_event_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\EventNodeController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/create_event',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_update_event_node' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\EventNodeController::updateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/node/update_event',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_delete_event_node' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\EventNodeController::deleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/node/delete_event',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_poi_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\PoiNodeController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/create_poi',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_update_poi_node' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\PoiNodeController::updateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/node/update_poi',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_image_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ImageNodeController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/node/create_image',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_update_image_node' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ImageNodeController::updateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/node/update_image',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_list_users' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\UserController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_user' => array (  0 =>   array (    0 => 'uid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\UserController::getAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'uid',    ),    1 =>     array (      0 => 'text',      1 => '/user/get',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_user_accreditation' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\UserController::getAccreditationAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/user/get_accreditation',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_group_members' => array (  0 =>   array (    0 => 'gid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\GroupController::getMembersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'gid',    ),    1 =>     array (      0 => 'text',      1 => '/group/get_members',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_group_services' => array (  0 =>   array (    0 => 'gid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\GroupController::getServicesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'gid',    ),    1 =>     array (      0 => 'text',      1 => '/group/get_services',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_list_comments' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\CommentController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/comments',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_comments' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\CommentController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/comments/create',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_comments' => array (  0 =>   array (    0 => 'cid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\CommentController::getAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'cid',    ),    1 =>     array (      0 => 'text',      1 => '/comments/get',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_workshop_attendees' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\WorkshopController::getAttendeesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/workshop/get_attendees',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_create_attendee_node' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\WorkshopController::createAttendeeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/workshop/create_attendee',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_publish' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::publishAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/contributions/publish',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_get_themes' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::getThemesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/contributions/get_themes',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_grant_points' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::grantPointsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/contributions/grant_points',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_remove_points' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::removePointsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/contributions/remove_points',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_list_medias' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::listMediasAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/contributions/list_medias',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_get_media' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::getMediaAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/contributions/get_media',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_get_media_file' => array (  0 =>   array (    0 => 'fid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::getMediaFileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'fid',    ),    1 =>     array (      0 => 'text',      1 => '/contributions/get_media_file',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_contributions_get_related' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ContributionController::getRelatedAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/contributions/get_related',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_list_webform' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\WebformController::indexWebformAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/webform',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_get_webform' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\WebformController::getWebformAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/webform/get',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_webform_submission' => array (  0 =>   array (    0 => 'nid',  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\WebformController::getSubmissionAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'nid',    ),    1 =>     array (      0 => 'text',      1 => '/submission',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'wellnet_test_3_legged' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Wellnet\\Bundle\\TestBundle\\Controller\\ThreeLeggedController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/3_legged',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
